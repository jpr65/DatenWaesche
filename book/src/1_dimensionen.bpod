# Buch

=head1 Dimensionen der Validierung

In den folgenden Kapiteln wird die Validierung von Daten aus allen Richtungen betrachtet.

Diese Betrachtungsrichtungen ("Dimensionen") der Validierung sind:

=over

=item B<1. Reinheitsgrad>

Wie sauber sind die Daten?

=item B<2. Gültigkeitsdauer>

Wie lange ist das Ergebnis der Validierung gültig?

=item B<3. Datenmenge>

Welche Datenmengen sind zu verarbeiten?

=item B<4. Validierungsaufwand>

Wie hoch ist der Aufwand, eine einzelne Prüfung durchzuführen?

=item B<5. Komplexität der Daten>

Welcher Komplexitätsstufe gehören die Daten/Objekte an?

=item B<6. Validierungsregeln>

Regeln im Lauf der Entwicklung und Freigabe (Release) von Software

=item B<7. Priorität>

Priorität der Ausführung der Daten-Prüfung abhängig von Regeln und Daten

=item B<8. Ergebnisse>

Verarbeitung und Zuordnung der Ergebnisse von Validierungen

=back

In den Dimensionen 2-5 gibt es viele verschiedene Größenordnungen, die unterschiedliche Anforderungen
an die Software stellen und die Art und Weise, wie Validierung durchgeführt und implementiert wird,
maßgeblich beeinflusst. Dieser Buchteil stellt die Dimensionen zunächst vor, im Teil II werden daraus
Anforderungen an die Software abgeleitet und im dritten werden für einige Teile beispielhafte
Implementierungen entwickelt.

=head1 Dimension Reinheitsgrad

In der Fertigung von Gütern gibt es den Ausdruck der "Erlaubten Toleranzen", der für
jedes Produkt genau festgelegt wird. Je geringer die Toleranz, desto aufwändiger und
damit teurer wird der Produktionsprozess.

Beispiele:

In einer Fabrik werden Seile für den Segelbedarf hergestellt. Weil der laufende Meter
in der Produktion weniger als 10 Cent kostet und die Seile in Trommeln zu 1000 Metern
geliefert werden, ist die Toleranz hier 10 Meter. Eine genauere Messung würde
3 Euro kosten und wäre damit teurer als die durchschnittlich 5m zu lang gelieferten
Seile, die ja nur 50 Cent mehr kosten.

Eine Wand für ein Wohnhaus hat eine Toleranz von vielleicht 5mm, ein Micro-USB-Stecker
für ein Ladegerät eine Toleranz von 0,1mm.

Die Fertigungstoleranz entspricht bei Daten dem "Verschmutzungsgrad". Durch mehrfaches
Validieren und Waschen werden die Daten bis zum gewünschten Ergebnis gesäubert. Wie das
funktioniert und was es bedeutet, wird im Folgenden mit der Validierung eines Geburtsdatums
illustriert.

Die Einteilung in Reinheitsgrade ist ab 3 willkürlich und abhängig vom Einsatzgebiet.

=head2 Reinheitsgrad 0 - Roh

Rohdaten sind gerade angelieferte Daten, die noch in keine Weise untersucht wurden.

Sie bergen große Risiken, z.B. das Risiko, mit Viren verseucht zu sein.

Das gilt auch immer für Daten, die von anderen Systemen oder vom Anwender kommen und
ganz besonders für Email-Anhänge von SPAM- und Schad-Emails.

Prüfungen im UserInterface, d.h. der Webseite, der App oder eines PC-Programms sind
Komfort für den User. Die eigentliche Prüfung startet auf dem (Web-)Server,
denn Dritte könnten die Daten verfälschen, der User oder ein Stellvertreter könnten
bewusste Sabotage verüben oder die Daten könnten durch den Transport beschädigt worden sein.

Da man in vielen Fällen prüfen muss, kann man sich eine komplexe und eventuell falsch getroffene
Entscheidung, ob und was geprüft werden soll, sparen und gleich alles prüfen.
Dadurch gewinnt man Zeit in der Entwicklung und Sicherheit, was man sich mit
Mehrkosten zur Laufzeit erkauft.

Rohdaten werden von Virenscannern untersucht und in die Quarantäne verschoben, falls
nur der Verdacht auf Virenbefall besteht.

Ebenso werden Dateien/Daten, die zu stark von der erwarteten Größe abweichen, in
einen Fehlercontainer verschoben und etikettiert mit "unerwartete Größe".

Die aussortierten Dateien oder Daten können dann bei Bedarf weiter untersucht werden.
Dazu ist Spezialsoftware auf speziellen Systemen notwendig.
Üblicherweise werden sie nach Ablauf einer festgelegten Frist - z.B. 4 Wochen - gelöscht.

Unser Geburtsdatum passiert diesen Test mit Leichtigkeit, denn es ist ja nur ein kurzer Text.

=head2 Reinheitsgrad 1 - Ungefährlich

Da die Daten/Dateien jetzt höchstwahrscheinlich ungefährlich sind - vollständig sicher ist man
da nie - , können Sie geöffnet und inspiziert werden.

An der Dateiendung darf man sich nicht orientieren, Schadsoftware verwendet oft unverdächtige
Dateiendungen, um ausführbaren Code zu verstecken.

Von jeder Datei werden nur die ersten 1000 Zeichen binär eingelesen und überprüft, ob
es sich um die gewünschten Datenformate handelt. Jedes Dateiformat hat seine speziellen
Kennungen, die jetzt überprüft werden.

Werden Unregelmäßigkeiten festgestellt, wandern auch diese Dateien in den Fehlcontainer mit
dem Etikett "unerwarteter Dateiinhalt".

Dasselbe gilt für Daten.

Die Datei/Daten sind damit als Bild/Video/Text oder ähnlich eingestuft.

Formate, die nicht bekannt sind oder nicht verarbeitet werden können, landen wiederum
etikettiert im Fehlcontainer.

Unser Geburtsdatum passiert auch diesen Test und wird als UTF-8 Text eingestuft.

Der Inhalt wäre beispielsweise:

  2003-10-09

also der 09. Oktober 2003

=head2 Reinheitsgrad 2 - Grob Klassifiziert

Ab jetzt spreche ich nur noch von Daten, die durch die SW bearbeitet werden. Ob sie aus Dateien,
Streams oder anderen Quellen stammen, ist nun unerheblich.

Erst hier startet die Verarbeitung durch die Anwendungssoftware.

Für unser Geburtsdatum bedeutet das, dass es als UTF-8 Text eingelesen wird und
eine schnelle Prüfung für einen Datumskandidaten durchläuft:

Die Länge muss zwischen 4 und 30 Zeichen liegen, außer Zahlen und Buchstaben sind nur 
Blank (Leerschritt), '.' und '-' erlaubt.

Falls der Datumskandidat diesen Test nicht besteht, wird er als "ungeeignet für Datum" in der
Datenhaltung markiert.

2003-10-09 erfüllt die Bedingung und wird an den nächsten Filter weitergereicht.

=head2 Reinheitsgrad 3 - Fein Klassifiziert

Der "datum_kandidat" durchläuft nun die festgelegte Validierung für ein Datum.

Nach der Validierung wird es entweder als "gültiges Datum" eingestuft oder als "fehlerhaftes Datum"
und in der Datenhaltung entsprechend markiert.

Das Geburtsdatum besteht auch diesen Test und wird als "gültiges Datum"
an die nächste Stufe weitergereicht.

=head2 Reinheitsgrad 4 - Mittelfilter

Da der Datums-Text ein "gültiges Datum" ist, kann er in ein echtes "Datum" (den Datentyp Date)
umgewandelt werden. Nun kann die Software mit dem Datum rechnen und vergleichen.

Ein gültiges Datum ist nur dann ein Geburtsdatum, wenn es gleich heute ist oder in der Vergangenheit
liegt.

Der 01.01.2100 ist damit kein gültiges Geburtsdatum.

2003-10-09 erfüllt auch diese Bedingung und erreicht damit die nächste Stufe.

=head2 Reinheitsgrad 5 - Feinfilter

Hier endet die automatische Prüfung durch Software in den meisten Fällen.

Aber nicht die Validierung!

Außerdem wird jetzt nicht mehr nur ein einzelner Wert geprüft, sondern das ganze Objekt
"Person" mit Name, Vorname, Adresse, Geburtsort und Geburtsdatum.

Ein Mitarbeiter erhält nun durch die Software die Aufgabe, die erfassten Daten
mit dem Personalausweis/Reisepass zu vergleichen, der als Original vorliegt.

Stimmen alle Daten überein, und damit auch die beiden Geburtstage,
markiert er diesen Test "von Hand" über die Programmoberfläche als bestanden.

Die Software kann alternativ mit bereits vorhandenen Daten vergleichen
oder beim Einwohnermeldeamt nachfragen.

Wenn dieser Test bestanden wurde, geht es in die nächste Stufe.

=head2 Reinheitsgrad 6 - Superfeiner Filter

Da man Pässe fälschen kann, wird der Eintrag über die Geburt aus dem Familienstammbuch des
Geburtsortes angefordert und mit den Daten verglichen. Mit etwas Glück ist auch die
Ausweisnummer im Familienstammbuch vermerkt oder angehängt.

Stimmen die Daten überein, wird die letzte Stufe erreicht, der Reinraum.

=head2 Reinheitsgrad 7 - Reinraum

Die Personen-Daten gehören somit zu einer realen Person und sind verifiziert.

=head2 Notwendige Reinheit

Welcher Reinheitsgrad für welche Daten in welcher Situation erreicht werden muss,
ist im einzelnen festzulegen:

Da für Geburtstage der Reinheitsgrad 5 immer ohne großen Aufwand erreicht werden kann,
sollte man ihn als Minimum vorschreiben.

Für den Verkauf eines Hauses oder Grundstückes ist unbedingt Reinheitsgrad 7 notwendig. 

Der Validator ist hier der Notar, der prüft, indem er Foto und Unterschrift
des Ausweises mit dem Käufer/Verkäufer
vergleicht und sich die Daten durch das Einwohnermeldeamt bestätigen lässt.

=head1 Dimension Gültigkeitsdauer

Die Gültigkeitsdauer einer Validierung bildet die 2. Dimension.

Wie lange gilt ein Prüfungsergebnis? Ein Neuwagen hat 3 Jahre Zeit bis zur nächsten
TÜV-Prüfung, danach wird auf 2 Jahre verkürzt. Busse werden jährlich TÜV-geprüft,
bei Baukränen und Baggern ist mir die Situation nicht bekannt.

Für Daten ist die Gültigkeitsdauer von Prüfungen optimalerweise als Ablauf-Datum oder
auch -Zeit festgelegt.

Zeiträume von Millisekunden in Echtzeitsystemen bis zu Jahrzehnten sind möglich.

=head2 Gültigkeit im Millisekundenbereich: ms

In der Produktion werden viele Messdaten innerhalb von Millisekunden erfasst und
verarbeitet. Hier gelten die speziellen Anforderungen für Echtzeit-Systeme der
Branche, die je nach Anwendungsfall mehr oder weniger stark reguliert sind.

=head2 Gültigkeit im Sekundenbereich: s

Im Basketball hat der Spieler nach der Freigabe durch den Schiedsrichter 5 Sekunden Zeit,
einen Einwurf durchzuführen. Solange ist ein Einwurf gültig und das Spiel
wird fortgesetzt.

Nach Ablauf der Frist wird abgepfiffen und ein trotzdem erfolgter Einwurf wird ungültig.
Das Spiel wird abgebrochen und die gegnerische Mannschaft erhält den nächsten Einwurf.

=head2 Gültigkeit im Minutenbereich: m

Eine Session im Internetportal meiner Bank läuft nach 15 Minuten ab,
wenn keine Aktionen durchgeführt werden. Dann wird der Anwender
automatisch ausgeloggt und muss sich neu anmelden.

Mit jeder Anfrage an den Server wird die Frist zurückgesetzt und die 15 Minuten starten erneut.

=head2 Gültigkeit im Stundenbereich: h

Ein Einzelfahrschein im öffentlichen Nahverkehr hat eine nach Preisstufen
festgelegte Gültigkeitsdauer von 0,5 bis 3 Stunden. Die Frist startet mit der Entwertung,
die den Fahrschein mit der aktuellen Zeit stempelt. Durch Zeitvergleich kann der
Schaffner, Fahrer oder Kontrolleur feststellen, ob der Fahrschein noch gültig ist oder nicht.

=head2 Tägliche Gültigkeit: T

Ein Tagesticket im öffentlichen Nahverkehr ist genau einen Tag gültig,
plus ein paar weitere Stunden in der frühen Nacht.

Für die Überprüfung wird die Uhrzeit noch benötigt,
falls der nachfolgende Tag schon erreicht wurde.

=head2 Wöchentliche Gültigkeit: W

Ein Wochenticket im öffentlichen Nahverkehr gilt genau für eine Kalenderwoche.

Ab Wochenfrist reicht ein Kalender zur Prüfung aus, die Uhrzeit wird nicht mehr benötigt.

=head2 Monatliche Gültigkeit: M

Ein Monatsticket gilt für den aufgedruckten Kalendermonat + 1 Tag vom nächsten Monat.

=head2 Jährliche Gültigkeit: J

Die Bahncard gilt ein Kalenderjahr.

Die Autobahn-Plakette der Schweiz für z.B. 2013 gilt von Ende Dezember 2012 bis Januar 2014.

=head2 Mehrjährige Gültigkeit: VJ

Kreditkarten und Personalausweise/Pässe gelten für viele Jahre, enthalten aber ein genaues
Ablaufdatum oder einen Ablaufmonat.

=head2 Lebenslange Gültigkeit

Führerscheine für PKWs und Motorräder gelten ein Leben lang. Ob das eine sinnvolle Dauer
ist, wenn im Alter die Reaktionsfähigkeit und Fähigkeit, ein Fahrzeug zu führen, langsam schwindet?
Doch wo soll man die Grenze ziehen?

=head2 Zusammenfassung Gültigkeitsdauer

Die Gültigkeitsdauer einer Validierung muss festgelegt werden. Das ist im Prinzip
nicht schwer, aber es muss getan werden.

Die Dauer der Gültigkeit wiederum kann auch durch den Zustand der Daten oder über andere 
Regeln beeinflusst werden: TÜV für Neuwagen erstmalig nach 3 Jahren, dann nach 2 Jahren.

Aus der Gültigkeitsdauer sollten Ablauf-Zeit oder -Datum berechnet und
in den Daten selbst gespeichert werden.

Ist das Ablaufdatum überschritten, geht die Validierung in den Zustand "ungeprüft" über.

Die Gültigkeit kann auch verlängert werden, wie im Beispiel des Online-Bankings. Dann
wird einfach ein neues Ablaufdatum eingetragen.

=head1 Dimensionen Datenmenge und Validierungsaufwand

Die Datenmenge ist eine weitere wichtige Information für die Validierung, die gemeinsam
mit dem Aufwand für eine einzelne Validierung die Zeitdauer für die Überprüfung
des gesamten Systems bestimmt.

Die Datenmenge sollte man grob abschätzen und in 1000er Schritten in Klassen einteilen:

=over

=item * S (small - klein) weniger als 50

=item * k (Kilo) um die 1.000

=item * M (Mega) um die 1.000.000 (Million)

=item * G (Giga) um die 1.000.000.000 (Milliarde)

=item * T (Tera) um die 1.000.000.000.000 (Billion)

=back

Giga und Tera sind zwar ungewöhnlich, aber nicht unmöglich.

Der Validierungsaufwand für die Validierung eines einzelnen Datensatzes ist deutlich
schwerer abzuschätzen und sollte sobald wie möglich durch Messungen überprüft werden.

Die Werte müssen in neutrale Punkte umgerechnet werden, um die Aufwände unabhängig
von der eingesetzten Technologie zu erfassen.

=over

=item * Einfache Operationen (1 Punkt)

Vergleiche von Text und Zahlen:
Hat der PKW mehr als 140.000 km zurückgelegt?

=item * Komplexere Operationen (25 Punkte)

Vergleiche mittels L<Regular Expressions>:
Überprüfung einer Email-Adresse auf korrekte Schreibweise.

=item * Abgleich mit Listen und DB-Einträgen (20 - 500 Punkte)

Wurde derselbe Datensatz bereits angelegt?
Existiert für jedes Kind in der DB mindestens ein Elternteil?

=item * Validierung durch externe Web-Services (100 - 1.000.000 Punkte)

Ermittlung des Halters durch Toll-Collect für die Nachforderung einer
nicht bezahlten LKW-Maut.

=item * Validierung durch persönliche Überprüfung (1.000.000 und mehr Punkte) 

Notar, TÜV, Polizei

=back

Die Punkte wurden von mir "nach Gefühl" vergeben. Durch Messungen und Erfahrung
muss daraus eine sinnvolle Standard-Bewertung entwickelt werden.

Der Validierungsaufwand einer Validierung berechnet sich damit aus der 

   Anzahl der Daten * Punkte (Einzelaufwand der Validierung) 

Summiert man die Aufwände für die verschiedenen Validierungen, erhält
man eine Gesamtpunktzahl.

Über die Performance des Gesamtsystems, d.h. wieviele Punkte können
pro Tag abgearbeitet werden, ergibt sich die Dauer für eine vollständige Daten-Prüfung.

Für große Datenmengen kann diese Dauer Monate oder Jahre erreichen.

Durch ungünstige Abläufe und ungeschickte Programmierung kann man die Aufwände um Faktoren von
100 oder mehr erhöhen. Im Extremfall beschäftigt sich das System nur noch mit Prüfungen, die
nie abgeschlossen werden können.

Wie man die Aufwände für die Datenvalidierung minimiert,
ist eines der zentralen Themen in Teil II und Teil III dieses Buches.

=head1 Dimension Komplexität der Daten

Die Komplexität der Daten/Klassen bildet eine weitere Dimension der Validierung.



=head2 Komplexität 0. Einzelwert

Ein einzelner Wert, z.B. eine Ja/Nein-Entscheidung, eine Zahl oder ein Name
bilden die einfachste mögliche Datenstruktur.

=head2 Komplexität 1. Komplexer Wert

Eine Uhrzeit, ein Datum, eine Ortsposition (Breiten- und Längengrad) bilden
die nächsthöhere Stufe.

=head2 Komplexität 2. Aufruf-Parameter

Achtung Software-Technik!

Die Aufruf-Parameter einer Funktion oder Methode setzen sich aus einer
Liste von benannten oder nur numerierten Variablen von Typ 0, 1, 2 oder 3
zusammen. Sie werden hier aufgeführt, weil sie mit denselben Verfahren
geprüft werden müssen wie die anderen mehr anwenderbezogenen Daten.

=head2 Komplexität 3. Instanzdaten

Eine Ansammlung von benannten Daten des Typs 0 und 1 (einfache und komplexe Werte)
bilden ein L</Objekt>, softwaretechnisch eine L</Instanz>. 

Eine Adresse setzt sich (in Deutschland) aus der Straße, der Hausnummer, der Postleitzahl und
dem Ortsnamen zusammen.

  Hauptstr. 1
  4630 Bochum 1

oder mit der neuen Postleitzahl

  Hauptstr. 1
  44787 Bochum

Das ist der einfachste Fall. Es gibt Adressen ohne Straße, aber mit Hausnummern.
Straßen ohne Hausnummern. Zusammengesetzte Ortsnamen und Gemeinde/Ort Kombinationen
und vieles mehr.

Ein Postleitzahl ist manchmal nicht bekannt und deswegen auch kein Pflichtfeld.

Das einzige, was an einer Adresse sicher ist, ist dass die Postleitzahl oft nicht
zur Kombination von Straße, Hausnummer und Ort passt.

Insgesamt hat man jedenfalls 3 oder 4 einzelne Werte, je nachdem ob man Straße und
Hausnummer zu einem komplexen Wert zusammenfasst oder nicht.

=head2 Komplexität 4. Aggregatdaten

Den Zusammenbau von mehreren Instanzen zu etwas Größerem nennt man Aggregat.

Eine Person hat einen Vornamen, einen Nachnamen und ein Geburtsdatum. Dadurch
würde für die Speicherung der Daten eine Instanz ausreichen, wenn sie nicht
noch eine oder mehrere Adressen hätte:

  Peter Mustermann
  geb. am 17.04.1983

  Adresse:
    Hauptstr. 1
    44787 Bochum

  Telefon:
    0234/123456789-4711

  Email: pm@myweb.de

=head2 Komplexität 5. Zusammengesetztes Aggregat

Im technischen Bereich ist der Motor eines Autos ein sehr komplexes Aggregat.
Die Lichtmaschine (ein Stromgenerator) ist ein ein weniger komplexes Aggregat.

Ein "Zusammengesetztes Aggregat" enthält nicht nur Instanzen, sondern andere
Aggregate.

Ein Auto enthält einen Motor zu dem eine Lichtmaschine gehört, die durch
einen Riemen vom Motor angetrieben wird.
Nur der Riemen ist kein Aggregat, sondern eine Instanz oder ein einzelner
Wert, das hängt von der Modellierung ab.

=head2 Komplexität 6. Service

Mit den bisher vorgestellten Daten und den dazugehörigen Funktionen/Methoden
kann man nun einen Service erstellen.

Ab dieser Stufe gibt es keine reinen Daten-Objekte mehr, jetzt tritt die Funktionalität
in den Vordergrund.

Ein gut programmierter Service lässt sich zum Beispiel mit einem guten Restaurant vergleichen:

Man meldet sich am Eingang, wird zu seinem reservierten Platz geführt und erhält
sofort die Speisekarte und ein Begrüßungsgetränk.

Der Ober hilft bei der Auswahl der Speisen und gibt Empfehlungen. Das Menü wird zügig und
in hoher Qualität serviert.

Nach dem Besuch des Restaurants ist man rundum zufrieden.

Die Realität bezogen auf Software und Internet sieht oft anders aus. Aber einige
arbeiten daran, den Standard eines guten Restaurants zu erreichen.

=head2 Weitere Stufen der Komplexität

Der Service ist nun nicht die höchste Stufe der Komplexität, aber die noch höheren Stufen
stellen keine weiteren Anforderungen an die Implementierung der Datenvalidierung,
wenn bis hierhin alles passend umgesetzt wurde. Ich möchte sie aber trotzdem kurz auflisten:

=over

=item * Komplexität 7. Library

Eine Library ist eine Zusammenfassung von Objekten/Klassen und Funktionen zu einem bestimmten Thema.
Die Implementierung der Validierung ist ein Kandidat für eine Library, die Regeln selbst können in
einer zweiten Library oder in einer Datenbank gespeichert werden, wenn sie sehr umfangreich sind.
Siehe Teile II und III.

=item * Komplexität 8. Programm/APP

Mit oder ohne Libraries (nicht zu empfehlen!) erzeugt man ein Programm oder eine App, welche
man starten und bedienen kann.

=item * Komplexität 9. SW-Produkt / Web-Portal

Ein Software-Produkt hat mindestens ein Programm, oft mehrere und zusätzlich noch Konfigurationsdaten.

Ein Web-Portal enthält mindestens einen Web-Server als Programm, oft noch viele weitere zusätzliche
Programme, Scripts und Services, die über die Webseiten gestartet und bedient werden.

=item * Komplexität 10. Computer / Smartphone

Auf einem Computer oder Smartphone laufen viele Programme/Apps parallel. Mittlerweile auch bei Apple...

=item * Komplexität 11. Computernetzwerk

Computer kann man miteinander verbinden und enthält damit ein Computernetzwerk, in dem Computer Daten
austauschen und gegenseitig Services starten können. Von privaten Kleinnetzwerken
mit einem PC und einem Smartphone bis zu mehr als 100.000 Computern in großen Firmen ist alles möglich.
Große Firmen betreiben oft ein eigenes Intranet, das wie das WWW funktioniert aber nur interne Computer
zulässt.

=item * Komplexität 12. World-Wide-Web

Für das WWW kann jeder einen Server bereitstellen.
Dazu benötigt er nichts als eine Web-Domain oder eine URL, eine IP-Adresse und einen Zugang zum WWW.
Das WWW organisiert die Reise der Daten zu allen Kommunikations-Partnern und ermöglicht den Zugriff
über Web-Browser, das Versenden von Emails und vieles mehr.

Die Anzahl der vernetzten Geräte hat die Milliarden-Grenze durch die vielen Smartphones
mittlerweile locker überschritten.

=back

=head1 Dimension Validierungsregeln

Die Gültigkeit, die Änderungen und das Release (Auslieferung) von Validierungsregeln
bilden eine weitere Dimension, deren Behandlung außerordentlich komplex ist und die
allzuoft vernachlässigt wird.

=head2 Gültigkeit von Regeln

Nicht alle Regeln sind jederzeit und für jeden gültig.

=head3 Zeitliche Gültigkeit von Regeln

Durch Änderungen von Gesetzen kann eine Regel zu einem bestimmten Termin verschärft oder 
großzügiger ausgelegt werden. Beispiel Zoll:

Zum 01.01.2015 gelten folgende (fiktive) Bestimmungen:

=over

=item * Alkoholeinfuhr

Statt bisher 5 Liter Wein sind nur noch 3 Liter zollfrei von Gebieten außerhalb der EU
einführbar.

Die Regel wurde verschärft. Dadurch müssen alle Lieferungen, die ab dem 01.01.2015
eintreffen, überprüft und neu verzollt werden, wenn sie mehr als 3 Liter Wein enthalten,
auch wenn die Bestellung 2014 aufgegeben wurde.

=item * Zigaretteneinfuhr

Statt bisher 1 Stange Zigaretten können jetzt 2 Stangen zollfrei eingeführt werden.

Die Regel wurde gelockert. Die Lieferung ist auf jeden Fall korrekt verzollt,
bei mehr als 1 Stange Zigaretten wird allerdings 1 Stange zuviel verzollt.
Um Kosten zu sparen, kann die Lieferung neu verzollt werden.

=back

=head3 Optionale Regeln

Optionale Regeln gelten nicht für alle Daten, sondern nur unter bestimmten Bedingungen.
Das kann erfordern, vor jeder Anwendung die Regel zu prüfen.

=over

=item * Zigaretteneinfuhr: Zusatz

Das gilt jetzt neuerdings auch innerhalb der EU.

Dieser Regelzusatz erzwingt die neue Verzollung von Zigaretten, die ab dem 01.01.2015
innerhalb der EU geliefert werden und mehr als 2 Stangen beinhalten.
Bisher waren ja beliebige Mengen zollfrei.

Eine einmalige neue Prüfung reicht hier aus.

=item * Winterreifen

Im Winter muss man bei winterlichen Verhältnissen mit Winter- oder Allwetter-Reifen fahren.
Sommerreifen sind unter diesen Bedingungen nicht mehr erlaubt.

B<Vor Antritt von jeder Fahrt> muss die Regel geprüft werden. Wie ist die Temperatur?
Ist mit Fahrbahnglätte durch Schnee, Eis oder Reif zu rechnen? Falls ja,
müssen Fahrzeuge mit Sommerreifen in der Garage stehen bleiben.

=item * Busfahrer

Für Busfahrer im Fernverkehr gelten besonders strenge Richtlinien. Neben der Fahrerlaubnis
muss auf Pausen und Ruhezeiten sowie die Gesundheit des Fahrers geachtet werden.
Diese komplexe Prüfung ist dazu in viele Einzelprüfungen aufzulösen, von denen einige vor Fahrtantritt
durchzuführen sind, Pausen und Ruhezeiten müssen kontinuierlich
während der Fahrt überprüft werden.

=back

=head3 Private Regeln

Der Anwohner einer für Kraftfahrzeuge gesperrten Straße hat eine dauerhafte Sondergenehmigung,
die ihm das Fahren auf der ansonsten gesperrten Straße erlaubt.

Diese Regel überlagert in seinem Fall das Verbot
und erlaubt ihm das Fahren auf der gesperrten Straße.

=head3 Kombination der Gültigkeiten für Regeln

Nach häufigem zu schnellen Fahren erhält ein Fahrer eine Fahrsperre und muss
für einen Monat seinen Führerschein abgeben. Er darf aber noch zur Arbeit fahren.

Der Fahrer erhält für eine begrenzte Zeit eine private Regel.

=head2 Änderung von Regeln

Werden Regeln verändert, die bereits ausgeliefert wurden und in Verwendung sind,
müssen abhängig von der Art der Änderung Prüfungen erneut durchgeführt werden.

=head3 Änderung der Regelimplementierung

Änderungen der Implementierung einer Regel führen zu einer neuen Regel,
die stärker oder schwächer einschränken kann oder auch völlig anders arbeitet.

Die sichere Methode ist, alle Prüfungen zu verwerfen und entsprechend neu
durchzuführen.

Bei kleinen Änderungen sollte unbedingt durch Tests verifiziert werden,
dass die Änderung auch wirklich klein ist. Die Ermittlung, was neu zu testen ist,
ist oft aufwendiger als die Prüfung für alle erneut durchzuführen. Denn
auch die Auswahl der Prüflinge muss beschrieben, implementiert und getestet werden.
Das bindet Entwickler und Tester und kostet Zeit.

Beispiel: *** fehlt ***

=head3 Änderung der Elternregeln

Wird die Liste der Elternregeln verändert, durch Streichung oder Hinzufügung von Regeln,
muss die Prüfung neu durchgeführt werden.

Beispiel: *** fehlt ***

=head3 Änderung der Gültigkeit

Wird die Gültigkeits-Dauer einer Regel verkürzt, müssen alle Prüfungen neu durchgeführt
werden, um die neue Gültigkeits-Dauer zu bestimmen.

Dasselbe gilt für die Änderung des Zeitraums, für den eine Regel gilt.

Beispiel: *** fehlt ***

=head3 Propagierung von Regeländerungen

Alle Kinder und ihre Enkel, Urenkel, ... einer Regel müssen neu durchgeführt werden,
falls eine der oben angegebenen Fälle für eine Änderung dieser Regel eintritt.

Beispiel: *** fehlt ***

=head2 Release von Regeln

Der letzte Punkt betrifft das Release (Freigabe und Auslieferung) von Regeln.

Jede Änderung einer Regel erzeugt Prüfrunden für alle Kind-Regeln und alle Daten,
zu deren Validierung die Regel eingesetzt worden ist.

Wenn ständig Regeln geändert und ausgeliefert werden, werden auch ständig neue Prüfrunden
notwendig sein. Irgendwann beschäftigt sich das System dann hauptsächlich mit
der Planung und Durchführung von Prüfungen.

Das Ziel sollte daher sein, Regeln in größeren Abständen zu aktualisieren.

Wenn Regeln direkt in der DB geändert werden können, müssen besondere Schutzmaßnahmen
getroffen werden, siehe dazu Teil II.

Um überhaupt feststellen zu können, was neu gerpüft werden muss, benötigt jede Regel
eine Versionsnummer, die durch das Release hochgezählt wird, wenn die Regel geändert wurde.

Die weiteren Details dazu finden sich ebenfalls in Teil II

=head1 Dimension Priorität

Wenn große Mengen an Daten neu zu validieren sind, müssen Prioritäten die Validierungen
in eine sinnvolle Reihenfolge bringen. Das Wichtigste zuerst, das andere später.

Für die Berechnung der Priorität können eigene Regeln definiert werden. Hier ist sehr viel
möglich und deshalb können für jedes Projekt andere Einstufungen verwendet werden.

Was sich unter welchen Umständen bewährt, muss sich noch zeigen. Ohne Prioritäten wird man
bei großen Datenmengen allerdings nicht glücklich. Wie die Praxis bereits gezeigt hat,
ist es oft und regelmäßig notwendig, bestimmte Prüfungen vorzuziehen.

=head2 Priorität von Regeln

Zur Festlegung der Reihenfolge für die Abarbeitung von geänderten Regeln existieren
folgende Möglichkeiten:

=over

=item * Betrachtung der Gültigkeitsdauer

=item * Betrachtung des Versionssprungs

=item * Manuell vergeben

Falls die Automatik nicht das gewünschte Ergebnis liefert, sollte man noch von Hand
eine Priorität vergeben können.

=back

=head3 Regel-Priorität nach Gültigkeitsdauer

Je kleiner die Gültigkeitsdauer, desto höher die Priorität. Ob das eine sinnvolle 
Einteilung ist, muss sich noch zeigen.

=head3 Regel-Priorität nach Versionssprung

Je mehr Änderungen eine Regel erfährt, desto wichtiger wird die Prüfung.
Auch hier muss die Praxis zeigen, ob es sich um eine sinnvolle Einteilung handelt.

=head3 manuelle Regelpriorität

Falls die Priorität stark von der durch Gültigkeitsdauer und Versionssprung zugewiesenen
abweicht, muss die Priorität von Hand vergeben werden können.

=head2 Priorität von Daten

Die zweite Priorität sortiert die zu prüfenden Datensätze in eine Reihenfolge.

=head3 Daten-Priorität nach Ablaufdatum

Wenn Daten ihr Ablaufdatum für die Prüfung überschreiten, müssen sie für die
nächsten Prüfrunden eingeplant werden.

=head3 Daten-Priorität nach Einstufung

Hier wird die Wichtigkeit nach der Daten-Klasse (z.B Führerschein, Kreditkarte)
vergeben. Führerschein-Daten und Kreditkarten-Daten werden allgemein
eher geprüft als die erfolgreiche Versendung von Werbebriefen.

=head3 Manuelle Daten-Priorität

Falls einem einzelnen Kunden der Werbebrief zu einem bestimmten Datum angekündigt wurde,
kann für diesen einen Datensatz (des Werbebriefes)
manuell eine beliebige, höhere Priorität gesetzt werden.

Dadurch wird die Prüfung schneller erledigt und der Brief kann schneller versendet werden.

=head1 Dimension Ergebnisse

Als letzte Dimension müssen die Ergebnisse verarbeitet und zugeordnet werden.

Das sollte zentral - z.B. über eine Validierungs-Library - geregelt werden.

Als gelungenes Beispiel führe ich hier die Test-Ergebnisse des CPAN-Testers für 
L<Scalar::Validation|http://matrix.cpantesters.org/?dist=Scalar-Validation+0.700>
auf. Optisch wäre bestimmt noch mehr möglich, aber dafür läuft es auf jedem Web-Browser
und wird vollautomatisch generiert.

=head2 Ergebnis Verarbeitung

Bevor die Ergebnisse präsentiert werden können, müssen sie zunächst einmal verarbeitet
werden. Bei großen Datenmengen ist das eine anspruchsvolle Aufgabe, wenn nicht
viel Rechenleistung und Speicherplatz dafür verwendet werden darf.

=head3 Ergebnisse speichern

Zunächst müssen die Ergebnisse gespeichert werden. Dabei muss man die Entscheidung treffen,
wie ausführlich die gespeicherten Daten sein sollen.

Im minimalen Fall speichert man die Durchführung und das Ergebnis als kleine Zahl(en).

Im maximalen Fall werden alle entstandenen Meldungen und Hilfetexte gespeichert.

Für schnell und leicht wiederholbare Prüfungen genügt oft die Information, dass die Prüfung
fehlgeschlagen ist. Bei Bedarf kann man sie wiederholen und das Ergebnis anzeigen.

Für kostenpflichtige oder sehr umfangreiche Prüfungen speichert man besser das Ergebnis ab.
Welche Ergebnisdaten wie gespeichert werden, ist wiederum festzulegen.

Für große Systeme kann man die Validierungsergebnisse in eigenen Datenbanken speichern,
um das Anwendungs-System zu entlasten.

=head3 Ergebnisse verdichten

30 Millionen Fehlermeldungen möchte man sich nicht eine nach der anderen ansehen.

Eine Filterung wird mindestens benötigt.

Besser sind verdichtete Daten, z.B. die Anzahl der Fehler
in jedem Datentyp, welche Fehler wie oft auftreten usw., weil dadurch die Datenbank
nicht so stark belastet wird und die verdichteten Daten in eigene Datenbanken ausgelagert
werden können.

=head3 Ergebnisse analysieren

Die verdichteten Ergebnisse können nun vollautomatisch, halbautomatisch oder manuell
analysiert werden. Welche Ergebnisse sind anders als üblich? Treten bestimmte Fehler
neuerdings häufiger auf?

=head2 Ergebnis-Zuordnung

Validierungsergebnisse müssen für jede Zielgruppe gefiltert und geeignet präsentiert werden.

Es ist sehr wichtig, die Ausbildung der Mitglieder aus den folgenden Gruppen zu kennen,
sie kann sich zwischen den Gruppen oder innerhalb einer Gruppe stark unterscheiden.

Unix-Admins können meistens programmieren, Windows Admins nicht immer, und jemand, der nebenbei
einige Server betreibt oder betreiben lässt, hat u.U. gar keine Ausbildung als Administrator,
muss aber auch die Ergebnisse soweit verstehen, um Gefahren zu erkennen und Hilfe anfordern
zu können.

=head3 Ergebnisse für Administratoren

Administratoren betreiben die Web-Seite, die Server und die Netzwerke. Für sie sind z.B.
fehlgeschlagene Login-Versuche interessant, die sich häufen. Es könnte sich um einen Hacker
handeln, der versucht, in das System einzubrechen.

Fehler beim Zugriff auf die Datenbank sind für sie ebenfalls interessant.

=head3 Ergebnisse für Entwickler

Entwickler müssen alle Ergebnisse lesen können. Spezielle Trace-Informationen über
fehlgeschlagene Prüfungen, die auch einen Call-Stack beinhalten, sind sehr hilfreich.

Diese Informationen dürfen aber keinesfalls beim Anwender landen. Einerseits sind sie
meistens für Anwender unverständlich und verdecken die eigentliche Fehlermeldung.
Andererseits sind sie für Hacker eine große Hilfe beim Eindringen in das System
oder sonstigen unerwünschten Aktivitäten.

=head3 Ergebnisse für Tester

Tester möchten gerne die Fehlerausgabe in eine private Datensammlung umleiten,
damit nach dem Test überprüft werden kann, welche Fehlermeldungen entstanden sind.
Sie dürfen auch Einblick in die Traces nehmen, wenn ihnen das hilft.

=head3 Ergebnisse für Support

Der Support möchte oft mehr sehen als ein Anwender, um den Fehler besser eingrenzen zu können.
Dazu sollte er alle Meldungen, die durch die Arbeit des Anwenders entstanden sind, herausfiltern
können.

Hier sind Fehlernummern und IDs zu den Validierungsergebnissen hilfreich.

=head3 Ergebnisse für externe Prüfer

Externe Prüfer, z.B. der TÜV oder Steuer- und Bilanzprüfer haben spezielle Anforderungen,
sodass sie als eigene Gruppe mit eigenen Rechten und eigenen Sichten eingerichtet werden sollten.

=head3 Ergebnisse für Anwender

Alle, die nicht unter eine der oben genannten Kategorien einzuordnen sind, sind Anwender.

Dazu können auch die Betreiber/Auftraggeber gehören. Als Beispiel führe ich hier einen Web-Shop auf
und unterteile weiter in Shop-Betreiber und Shop-Kunden.

=head4 Ergebnisse für Shop-Betreiber

Ein Shop-Betreiber interessiert sich z.B. sehr für fehlgeschlagene Validierungen von Kreditkarten,
damit er die Karten oder den Benutzer notfalls sperren kann.

Außerdem interessiert er sich für ungewöhnliche Ereignisse und ungewöhnlich hohe oder niedrige
Rechnungen und möchte gern Warnungen erhalten, wenn die Lagerbestände bestimmte Werte unter-
oder überschreiten. Auch das kann man mit Validator-Regeln realisieren, da es sich um die 
Validierung des Lagerbestands handelt.

=head4 Ergebnisse für Shop-Kunden

Der Kunde benötigt eine Hilfestellung bei der Eingabe und die Möglichkeit,
bei Schwierigkeiten die ID des Fehlereintrags abzufragen und an den Support zu senden.

=head2 Ergebnis-Präsentation

Nachdem die Ergebnisse verarbeitet und den entsprechenden Interessengruppen zugeordnet
wurden, müssen sie jetzt noch in geeigneter Form präsentiert werden.

Das kann durch Tabellen, Grafiken und Einzel-Ansichten durchgeführt werden.

Für den Anwender ist eine schnelle kurze Rückmeldung nach jeder Eingabe hilfreich,
die per Mouse-Klick oder automatisch weitere Erläuterungen zum gefundenen Fehler liefert
und Fehler deutlich anzeigt.

Wer hier ein gutes System findet, wird sehr viel Aufwand in der Hotline einsparen.

=head1 Fazit zu Validierungsdimensionen

Möglicherweise existieren noch mehr Dimensionen in der Software, die für die Validierung
wesentlich sind. Die letzten drei sind mir erst eingefallen, als ich die ersten fünf
beschrieben hatte.

In jedem professionellen Software-Projekt B<muss> man für jede dieser Dimensionen
prüfen, welche Punkte relevant sind.

Im nun folgenden Teil II werden die Anforderungen/Auswirkungen dieser Dimensionen an die Software
herausgearbeitet.
