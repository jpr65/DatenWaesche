# Buch

=head1 Verwandte Themen

=head3 Das Wichtigste zu Login-Verfahren

Wie bereits in der Einleitung erwähnt:

Login-Verfahren validieren/verifizieren den Anwender, der sich am System anmeldet.
Das ist ebenfalls eine Art von Datenvalidierung, noch dazu eine äußerst kritische.
Die Problematik ist fachlich ausführlich beschrieben. Erstaunlicherweise
wird hier jedoch oft gegen einfachste Regeln verstoßen, sodass sich unnötigerweise
Schwachstellen ergeben.

Daher gehe ich hier kurz auf wichtige Punkte ein. Die fertige Lösung sollte unbedingt
von einem Spezialisten untersucht werden!

Bevor man sich mit den verschiedenen Möglichkeiten des Logins beschäftigt, 
muss man die zu erreichende Sicherheitsstufe festlegen. Das ist Teil des
Validierungs-Konzepts.

=over

=item 1. Kommunikationsparter verifizieren

Vor dem Login muss man sich von der Echtheit des Web-Servers überzeugen, auf dem
man sich anmelden möchte. Pisher verwenden oft ähnliche Web-Adressen oder versenden
falsche Links per Email. Viele Browser zeigen hier links neben der URL ein Symbol
an, das den Partner verifiziert und beim Anklicken Details des Partners zeigt.

Technisch wird hier das Zertifikat überprüft, das der Webserver verwendet.
Daher ist es für jede Webseite wichtig, ein - gültiges - Zertifikat zur Verfügung zu stellen.

Bei Schwierigkeiten mit dem Zertifikat, das z.B. gar nicht vorhanden oder ungültig ist,
sollte man hier stoppen, und auf gar keinen Fall einen Login-Versuch starten.
Möglicherweise sitzt am anderen Ende der Leitung (auf dem Server) jemand, der
Ihre Login-Informationen stehlen oder Ihnen anderweitig schaden will.

=item 2. https - Verschlüsselung

Alle Übertragungen zwischen Systemen über das Internet müssen verschlüsselt werden, damit dritte sich
nicht dazwischenschalten und mitlesen/mithören können. Im Intranet sollte ab einer gewissen
Größe/Sicherheitsstufe ebenfalls verschlüsselt werden.

Mit "http" versendet der Web-Browser alles unverschlüsselt, auch Passwörter, die ja erst
auf dem Webserver ausgewertet werden können.

Erst mit dem Umschalten auf "https" wird die Kommunikation zwischen Browser und Web-Server
verschlüsselt. Informieren Sie sich, wie Ihr Web-Browser das anzeigt. Oft wird ein Schloß
oben links neben der Adresszeile dargestellt, das beim Anklicken Details anzeigt.

Technisch ist es auch möglich, sich auf einer ungesicherten "http" Seite sicher anzumelden,
weil anschließend auf das sichere "https" umgeschaltet wird. Das ist aber erst durch
die Inspektion des HTML-Codes der Seite feststellbar.

Deshalb empfehle ich allen Entwicklern, bereits für das Login auf Verschlüsselung
mit https zu wechseln.

Für besonders hohe Sicherheit ist https eventuell nicht mehr ausreichend, dann sollten die Daten,
die über https ausgetauscht werden, noch mit einer hochsicheren Verschlüsselung
einzeln verschlüsselt werden.

Verschlüsselungssoftware aus den USA ist grundsätzlich als schwach einzustufen, weil
die Vermarktung in den USA den Einbau von Hintertüren für die NSA zwingend vorsieht.
Deshalb sind auch PGP-Verfahren ab einer bestimmten Schlüssellänge nicht erwünscht,
da auch die NSA mit ihren Supercomputern den Schutz nicht knacken kann.

Im Zweifelsfall auf OpenSource SW zurückgreifen und die Libraries selbst inspizieren und compilieren
oder das von vertrauenswürdigen Institutionen durchführen lassen.

=item 3. Passwörter + TAN + Private Key

Für die Eingabe von Passwörtern vorgefertigte UI-Elemente verwenden. Eigene sind oft zu unsicher!

Dann das Passwort auf den Webserver übertragen und dort prüfen.

Für höchste Sicherheit kann man 10kByte oder mehr, zufällig gefüllt, an das Login übersenden,
die dann mit dem privaten Key signiert und wieder zurückgesendet werden.
Das entspricht der hohen Sicherheitstufe von Zertifikaten.

=item 4. Erfolgreiches Login

Erst B<nach> dem erfolgreichen Login sollte die Session gestartet werden, die dem User
die vorkonfigurierten Zugriffsrechte gewährt.

Zugriffsrechte sollten niemals persönlich, sondern nur durch die Zugehörigkeit zu Gruppen
gewährt werden. Dadurch wird das Erweitern und Einschränken von Rechten sehr vereinfacht
und sehr übersichtlich.

=item 5. Sicherheits-Schleusen

Sichheitsschleusen werden eingesetzt, um sensible Bereiche besonders zu schützen, in Forschungs-Labors,
Krankenhäusern, Gefängnissen usw.

Viele Web-Portale arbeiten mit sensiblen Daten, aber ohne Sicherheitsschleuse.

Ich empfehle ein mindestens 3-stufiges System für jede geschäftliche Web-Anwendung.
Ein einzelner Einbruch in das Webportal verursacht in den meisten Fällen Kosten, die die Kosten
für Einrichtung und Betrieb zweier weiterer Web-Server um ein vielfaches übersteigen.

Zusätzlich schützt dieser Ansatz vor Angriffen, die das System überlasten sollen
(Denial of Service Attacks). Nach dem Einloggen kann man durch die Trennung der Web-Server
eine andere Leitung nutzen und IP-Adressen und URLs variieren.

=over

=item 1. Public Web-Server

Der Public Web-Server enthält den öffentlich zugänglichen Teil, der ohne login
erreicht und gelesen werden kann.

Minimal enthält er eine Web-Seite, die einen Web-Link (URL) auf den Login-Webserver enthält.
Er hat bis auf den Link keinerlei Informationen über die anderen Server.

=item 2. Login Web-Server

Der Login Web-Server wird nur für die Authentifizierung eingesetzt. Er erzeugt eine erste,
kurzlebige Session für den Login-Vorgang und alle damit verbundenen Aktivitäten.

Nach erfolgreichem Login fordert er vom Anwendungssystem eine Session für das authentifizierte
Login an und sendet die Session-ID an den Webbrowser des Users.

=item 3. Anwendungs-Webserver

Nur der Login Web-Server darf eine Session auf dem Anwendungs-Webserver starten,
am besten unter Verwendung von Zertifikaten.
Anfragen von anderen Systemen werden grundsätzlich abgelehnt.

=back

=item 6. Sessions

Die Gültigkeitsdauer und der Gültigkeitsbereich von Sessions müssen genau festgelegt werden.
Session-IDs benötigen eine Mindestlänge, z.B. von 30 alphanumerischen Zeichen.

=back

Spezialisten für Security und Firewalls haben noch
weiterführende Ideen und Lösungsansätze im Angebot.
