# Buch

=head1 Einführung in die Datenvalidierung

In diesem Kapitel wird zunächst definiert, was genau unter Daten-Validierung zu verstehen ist.
In den folgenden Kapiteln wird die Validierung von Daten aus allen Richtungen betrachtet.

Diese Betrachtungsrichtungen ("Dimensionen") der Validierung sind:

=over

=item 1. Reinheitsgrad

=item 2. Gültigkeitsdauer

=item 3. Datenmenge

=item 4. Validierungsaufwand

=item 5. Komplexität der Daten

=item 6. Validierungsregeln

=item 7. Priorität

=item 8. Ergebnisse

=back

Jede Dimension wird im folgenden in einem eigenen Kapitel vorgestellt und genau untersucht.

Daraus abzuleitende Maßnahmen für die Software-Entwicklung werden in Teil II in eigenen Kapiteln
zusammengefasst.



=head2 Definition Daten-Validierung

Unter B<Daten-Validierung> versteht man die 

=over

=item 1. B<Prüfung der Syntax von Daten>

durch die Prüfung der formalen Richtigkeit der Daten (Syntax - Rechtschreibung),

=item 2. B<Ermittlung der Gültigkeit von Regeln für die Daten>

nachdem in 1. die Daten erfasst wurden, können jetzt im zweiten Schritt die Inhalte für
eine Überprüfung von Regeln verwendet werden.

=back

Die Prüfung der inhaltlichen Korrektheit von Daten ist hiervon ausgenommen.

=head2 Schritt 1: Syntaxprüfung

Das Ziel der Syntaxprüfung ist das Herausfiltern von Datenschmutz oder fehlerhaft erfasster Daten und
die anschliessende Konvertierung (Umwandlung) in einen Software-Datentyp.

Die Syntax der Daten kann natürlich auch über Regeln geprüft werden,
bevor sie konvertiert (umgewandelt) und gespeichert werden.

=head3 Vertiefung in Beispielen

Daten sollten zunächst immer als Text (String) erfasst werden. Ein Text ist einfach
eine Abfolge von Zeichen, z.B.

  1 Minute = 60 Sekunden

Dieser Text enthält insgesamt 23 Zeichen (ohne Leerraum außen), und zwar
außer den großen und kleinen Buchstaben
3 Ziffern, 4 Leerzeichen (Space) und ein Sonderzeichen, das Gleichheitszeichen.

Um z.B. die Anzahl der Tischtennisbälle in einer Verpackung einzugeben wird der Text

  100

vom Anwender über die Tastatur eingegeben. Der Text besteht aus den Ziffern 1, 0, 0.
Die Regel I<Ganze Zahl> wird jetzt auf den Text "100" angewendet und bestätigt,
dass dieser Text in die ganze Zahl I<100> umgewandelt werden kann.

Passender ist hier allerdings die Regel I<Positive ganze Zahl Größer Null>,
die negative Zahlen und die 0 ausschließt.

Wenn die Regel grünes Licht gibt, kann der Text in eine ganze Zahl (Integer) umgewandelt werden,
die für Berechnungen und Vergleiche verwendet werden kann.

Wenn nun die Zahl

  999 999 999 999 999

(ohne Leerschritte) eingegeben wird, wird das zu Problemen bei der Umwandlung führen,
die Zahl ist einfach zu groß für einen Integer.

Daher wird die Regel weiter spezifiziert zu

  Positive ganze Zahl mit maximal 4 Stellen

Jetzt liegt das Maximum bei I<9999> Tischtennisbällen, und es kann in jedem Fall in einen
Integer umgewandelt werden.

Für Experten noch der Reguläre Ausdruck:

  ^\d{1,4}$

Mit der ganzen Zahl gespeichert als Integer kann nun Schritt 2 durchgeführt werden.

=head2 Schritt 2: Validierungsregeln 

Das Ziel der Validierung über Regeln ist es, bestimmte Eigenschaften der Daten zu
bestimmen und zu garantieren. Das kann sowohl für einzelne Werte oder auch für komplexe
Datenstrukturen durchgeführt werden.

=head3 Beispielhafte Validierung für Einzelwert-Prüfung

Für den Webshop soll eine Mindestbestellmenge von 50 bei einer maximalen Packungsgröße
von 2000 Bällen festgelegt werden als Regel I<BestellmengeTischtennisbaelle>:

  50 <= AnzahlBälle <= 2000

Leert sich nun das Lager, kann die Regel dynamisch angepasst werden, indem die obere Grenze
nach und nach verkleinert wird:

  50 <= AnzahlBälle <= 1500
  50 <= AnzahlBälle <= 1000
  50 <= AnzahlBälle <= 500

Ist das Lager leer, wird die Regel ersetzt durch

  False, Message:="Zur Zeit sind keine Tischtennisbälle mehr lieferbar."

Wenn Tischtennisbälle nachbestellt wurden, kann die Regel umgeformt werden zu:

  False, Message:="Tischtennisbälle sind erst wieder ab Anfang März lieferbar."

"False" heißt hier, dass die Regel immer fehlschlägt und die als "Message" 
angegebene Meldung liefert.

=head4 Für Software-Kundige

Die Software ruft immer nur die Regel I<BestellmengeTischtennisbaelle> auf. Wie die Regel
umgesetzt wird, muss sie nicht wissen und sich auch nicht um die Fehlerbehandlung
und Fehlermeldung kümmern. So kann die SW von außen verändert werden, ohne eine einzige
Bedingung (IF ...) im Code programmieren zu müssen, z.B. mit Perl und L</Scalar::Validation>
sieht der Code dann so aus:

  my $bestellmenge_tt_baelle
      = validate ("Bestellmenge Tischtennisbälle"   # Der Name für den Anwender
                  => BestellmengeTischtennisbaelle  # Die Regel
                  => read_bestellmenge_tt_baelle()  # Der zu prüfende Wert
  );  
 
Ganz gleich, was die Funktion read_bestellmenge_tt_baelle() der Prüfung mit validate()
übergibt, B<nachher> steht ein gültiger Wert in der Variablen, andernfalls wird die Abarbeitung
hier mit einer passenden Fehlermeldung unterbrochen.
Das vereinfacht und stabilisiert die SW sehr.

Ohne Validerung wird der Code nicht sehr viel kürzer, aber dafür sehr viel instabiler:

  my $bestellmenge_tt_baelle = read_bestellmenge_tt_baelle();  # Ein ungeprüfter Wert!!

=head3 Test der Validierungsregeln für Einzelwert-Prüfung

Da die Validierungsregeln Bestandteil des Produktes sind, müssen sie natürlich auch getestet
werden. Hier kann man mit Unit-Tests wiederum sehr einfach Tests schreiben, die auch alle
Sonderfälle abdecken.

Wie man Validierung mittels TDD leicht und sicher implementieren kann,
ist beschrieben in Teil III, Abschnitt L</Aufbau von Unit-Tests>



=head2 Grundsätzliches zu Prüfungen/Entscheidungen

Datenvalidierung ist ein Prüfverfahren. Der Validator trifft die Entscheidung, ob die Daten
der Regel entsprechen oder nicht.

Daraus ergeben sich mindestens sieben! Fälle - und nicht nur zwei -, die zu unterscheiden sind!

Die Fälle 1-3 sind Status-Informationen über die Durchführung der Prüfung, die letzten 4-7
die möglichen Ergebnisse der Prüfung. Es ist meistens keine gute Idee, die beiden Kategorien
zu einer zusammenzufassen, wie man in Teil II sehen wird,
aber Ihnen stehen natürlich auch alle anderen Möglichkeiten offen.

=over

=item 1. L</Prüfungsfall ?: Ungeprüft>

=item 2. L</Prüfungsfall X: Prüfung anstehend>

=item 3. L</Prüfungsfall R: Prüfung läuft>

=item 4. L</Prüfungsfall TP: Korrekt bestanden>

=item 5. L</Prüfungsfall TN: Korrekt durchgefallen>

=item 6. L</Prüfungsfall FP: Regelwidrig bestanden>

=item 7. L</Prüfungsfall FN: Regelkonform, aber durchgefallen>

=back

Vor allem in der Medizin wird das Modell mit den vier Prüfergebnissen
eingesetzt, um Fehldiagnosen zu kennzeichnen.

=head3 Prüfungsfall ?: Ungeprüft

Merker: ? weiß nicht genau...

Neue oder veränderte Daten stehen immer im Status ungeprüft. Ungeprüfte Daten dürfen
nur editiert werden. Weiterverwendung für andere Prozesse/Services ist mit hohem
Risiko verbunden und muss verhindert werden. Das wird nicht immer funktionieren...

=head3 Prüfungsfall X: Prüfung anstehend

Merker: angekreuzt mit X für eine Prüfung

Die Daten sind für eine Prüfung markiert. Editieren/Update ist möglich, dann wird wieder
auf "? (ungeprüft)" umgeschaltet.

=head3 Prüfungsfall R: Prüfung läuft

Merker: R (Running, Laufende) Prüfung

Ob man bei laufender Prüfung das Verändern der Daten noch zulässt, muss festgeschrieben
und dann auch eingehalten werden. Verändern führt wieder in Zustand "? (ungeprüft)" .
Der Validator muss in diesem Fall die Änderung des Status erkennen und das Ergebnis
der Prüfung verwerfen. Es darf keinesfalls in die Daten geschrieben werden,
da ja ein ganz anderer Stand geprüft worden ist. Wird das nicht berücksichtigt,
hat man ungeprüfte Daten mit einer Prüfplakette versehen:

Man fährt mit dem Auto zum TÜV, lässt prüfen, besteht, erhält die TÜV-Plakette und
den Eintrag im Fahrzeugschein.
Man fährt nach Hause und nimmt größere, abnahmepflichtige Umbauten am Fahrzeug vor,
B<ohne> das Fahrzeug nocheinmal zu einer Abnahme vorzuführen.

Jetzt hat man ein Fahrzeug mit TÜV-Plakette, aber ohne Zulassung. Man verliert u.U.
seinen Versicherungsschutz. Aber man hat ja nicht vor, aufzufallen! Wird schon gutgehen.

Meistens geht es auch gut, mit den Daten jedenfalls. Das Auto muss ja in zwei Jahren wieder
zum TÜV, die Daten meistens nicht.

=head3 Prüfungsfall TP: Korrekt bestanden

Merker: True Positive

"True Positive" oder "Korrekt erfüllt" heißt folgendes:

Der zweite Teil bezieht sich auf das festgestellte Ergebnis der Prüfung. Die Prüfung wurde
von der Software als erfüllt (positive oder true) angesehen.

Als Ergebnis wird "bestanden" in die Daten eingetragen.

Der erste Teil informiert darüber, ob die vom System getroffene Entscheidung richtig war,
in diesem Fall ja, daher "True" oder "Korrekt".
Nur dieser Fall garantiert die unproblematische Weiterverwendung der Daten.

=head3 Prüfungsfall TN: Korrekt durchgefallen

Merker: True Negative
  
Der Prüfling ist leider durchgefallen (Teil 2: Negative),
die Prüfung wurde nicht bestanden. Diese Entscheidung war korrekt (Teil 1: true)
  
Als Ergebnis wird "durchgefallen" in die Daten eingetragen.
  
Alles gut, die Daten müssen überarbeitet werden.
 
=head3 Prüfungsfall FP: Regelwidrig bestanden
   
Merker: False Positive
   
Fussball: Ein Tor wurde vom Schiedsrichter anerkannt, obwohl es Abseits war!

Das ist der kritische Fall, der nicht auftreten sollte.  
Der Prüfling ist nach Lage der Daten durchgefallen.
    
Leider ergibt die Prüfung, dass er bestanden hat (Positive)!
 
Was nicht korrekt ist (False in Teil 1).
  
Als Ergebnis wird trotzdem "bestanden" in die Daten eingetragen.
Die Software geht ja davon aus, dass er bestanden hat!
 
Übertragen auf Autos heisst das, dass der TÜV-Prüfer gravierende Mängel übersehen
hat und Ihnen eine TÜV-Bescheinigung ausstellt, obwohl das Fahrzeug nicht verkehrstüchtig
ist, weil die Bremsen versagen könnten. 

Statt in die Werkstatt fahren Sie hoffentlich nicht in zwei Tagen ins Gebirge.
                                          
Die Anzahl dieser Fälle kann man nur reduzieren durch ausgiebige Tests der Prüfungen oder mehrere
unabhängige Prüfungen, die alle parallel ausgeführt werden.

=head3 Prüfungsfall FN: Regelkonform, aber durchgefallen    

Merker: False Negative

Fussball: Ein Tor wurde vom Schiedsrichter nicht anerkannt, und auf Abseits entschieden.
Diese Entscheidung war leider falsch. Es nämlich B<kein Abseits>.

Nach Lage der Daten hat der Prüfling bestanden, aber der Prüfer sieht das fälschlicherweise
anders und verweigert die TÜV-Plakette.

Als Ergebnis wird "durchgefallen" (Negative) in die Daten eingetragen.
Was in diesem Fall nicht stimmt (False) und so manchen Anwender in den Wahnsinn treibt.
Er hat ja alles korrekt eingegeben, aber die Daten werden nicht akzeptiert.

Hier ist es wichtig, dass das System von Hand überstimmt werden kann, indem man den
Zustand auf "bestanden" ändert. Natürlich nur nach genauer Prüfung durch einen Experten,
der nicht der User sein sollte, der die Daten erstellt hat.

Sonst läuft man Gefahr, dass der User alle fehlerhaften Daten ohne weitere Prüfung
einfach "durchwinkt" und das System mit fehlerhaften Daten geflutet wird.

